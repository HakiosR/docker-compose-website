services:
  njs-app1:
    build: 
      context: ./njs-app1
      dockerfile: Dockerfile
    container_name: njs-app1
    ports:
      - "3001:3000"
    volumes:
      - ./njs-app1:/app
    environment:
      - NODE_ENV=development
    restart: always
    networks:
      - webnet
    healthcheck:
      test: ["executable", "arg"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    
  njs-appX:
    build:
      context: ./njs-appX
      dockerfile: Dockerfile
    container_name: njs-appX
    ports:
      - "300X:3000"
    volumes:
      - ./njs-appX:/app
    environment:
      - NODE_ENV=development  
    restart: always
    networks:
      - webnet
    healthcheck:
      test: ["executable", "arg"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    
      
  # nginx:
  #   image: nginx:latest
  #   container_name: nginx
  #   ports:
  #     - "81:80"
  #     - "444:443"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf
  #     - ./nginx/ssl:/etc/letsencrypt
  #     - ./nginx/ssl-data:/data/letsencrypt
  #     - ./certbot:/var/www/certbot
  #   depends_on:
  #     - web-breizhrp
  #   networks:
  #     - webnet


  # certbot:
  #   image: certbot/certbot
  #   container_name: certbot
  #   ports:
  #     - "82:80"
  #     - "8843:443"
  #   entrypoint: /bin/sh -c "trap exit TERM; while :; do certbot renew; sleep 12h & wait $!; done"
  #   volumes:
  #     - ./nginx/ssl:/etc/letsencrypt
  #     - ./nginx/ssl-data:/data/letsencrypt
  #     - ./certbot:/var/www/certbot
  #   networks:
  #     - webnet

networks:
  webnet:
    driver: bridge