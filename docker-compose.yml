services:
  njs-app1:
    build: 
      context: ./njs-app1
      dockerfile: Dockerfile
    restart: unless-stopped
    container_name: njs-app1
    ports:
      - "3001:3000"
    volumes:
      - ./njs-app1:/app
    environment:
      - NODE_ENV=development
    networks:
      - webnet
    
  njs-app2:
    build: 
      context: ./njs-app2
      dockerfile: Dockerfile
    restart: unless-stopped
    container_name: njs-app2
    ports:
      - "3001:3000"
    volumes:
      - ./njs-app2:/app
    environment:
      - NODE_ENV=development
    networks:
      - webnet 

  njs-app3:
    build: 
      context: ./njs-app3
      dockerfile: Dockerfile
    restart: unless-stopped
    container_name: njs-app3
    ports:
      - "3001:3000"
    volumes:
      - ./njs-app3:/app
    environment:
      - NODE_ENV=development
    networks:
      - webnet

  njs-appX:
    build:
      context: ./njs-appX
      dockerfile: Dockerfile
    restart: always
    container_name: njs-appX
    ports:
      - "300X:3000"
    volumes:
      - ./njs-appX:/app
    environment:
      - NODE_ENV=development
    networks:
      - webnet    
      
  npm:
    image: 'jc21/nginx-proxy-manager:latest'
    restart: unless-stopped
    container_name: npm-reverse-proxy
    ports:
      - '80:80'
      - '81:81'
      - '443:443'
    volumes:
      - ./npm/data:/data
      - ./npm/letsencrypt:/etc/letsencrypt
    depends_on:
      - njs-app1
      - njs-appX
    networks:
      - webnet
    healthcheck:
      test: ["CMD", "/usr/bin/check-health"]
      interval: 10s
      timeout: 3s
  
  # Email:    admin@example.com
  # Password: Password: changeme
  # WebUI:    http://localhost:81

networks:
  webnet:
    driver: bridge